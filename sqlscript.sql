/* Création de la base de données */

/* Création des tables */
-- Table Client
DROP TABLE IF EXISTS client;
CREATE TABLE client (
  idclient NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  nom_client VARCHAR2(45) NOT NULL,
  prenom_client VARCHAR2(45) NOT NULL,
  adresse VARCHAR2(45),
  num_tel VARCHAR2(8),
  email VARCHAR2(45) NOT NULL,
  CONSTRAINT client_pk PRIMARY KEY (idclient)
);
-- Table User
DROP TABLE IF EXISTS utilisateur;
CREATE TABLE utilisateur (
  idutilisateur NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  nom_utilisateur VARCHAR2(16) NOT NULL,
  mot_de_passe VARCHAR2(32) NOT NULL,
  idclient NUMBER,
  typeutilisateur NUMBER NOT NULL,
  CONSTRAINT utilisateur_pk PRIMARY KEY (idutilisateur),
  CONSTRAINT utilisateur_fk_client FOREIGN KEY (idclient) REFERENCES client (idclient)
);

-- Table Chambre
DROP TABLE IF EXISTS chambre;
CREATE TABLE chambre (
  numchambre NUMBER NOT NULL,
  capacite NUMBER NOT NULL,
  typechambre VARCHAR2(45) NOT NULL,
  statut NUMBER NOT NULL,
  etage NUMBER NOT NULL,
  prix_par_jour NUMBER NOT NULL,
  CONSTRAINT chambre_pk PRIMARY KEY (numchambre)
);

-- Table Reservation
DROP TABLE IF EXISTS reservation;
CREATE TABLE reservation (
  idreservation NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  id_client_reservant NUMBER NOT NULL,
  date_reservation DATE NOT NULL,
  typereservation NUMBER NOT NULL,
  check_in_date DATE NOT NULL,
  check_out_date DATE NOT NULL,
  souhait_particulier VARCHAR2(45),
  id_chambre_reserve NUMBER NOT NULL,
  CONSTRAINT reservation_pk PRIMARY KEY (idreservation),
  CONSTRAINT reservation_fk_client FOREIGN KEY (id_client_reservant) REFERENCES client (idclient),
  CONSTRAINT reservation_fk_chambre FOREIGN KEY (id_chambre_reserve) REFERENCES chambre (numchambre)
);

-- Table Paiement
DROP TABLE IF EXISTS paiement;
CREATE TABLE paiement (
  idpaiement NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
  idreservation NUMBER NOT NULL,
  montant NUMBER NOT NULL,
  date_paiement DATE NOT NULL,
  surcharge NUMBER,
  typepaiement VARCHAR2(45) NOT NULL,
  CONSTRAINT paiement_pk PRIMARY KEY (idpaiement),
  CONSTRAINT paiement_fk_reservation FOREIGN KEY (idreservation) REFERENCES reservation (idreservation)
);


CREATE OR REPLACE PROCEDURE chambres_disponibles(
    check_in IN DATE,
    check_out IN DATE,
    nb_personnes IN NUMBER
) IS
    chambre_dispo chambre%ROWTYPE;
    cur_count NUMBER := 0;
    CURSOR cur IS
        SELECT *
        FROM chambre
        WHERE capacite >= nb_personnes
        AND numchambre NOT IN (
            SELECT id_chambre_reserve
            FROM reservation
            WHERE (check_in_date BETWEEN check_in AND check_out)
            OR (check_out_date BETWEEN check_in AND check_out)
            OR (check_in BETWEEN check_in_date AND check_out_date)
            OR (check_out BETWEEN check_in_date AND check_out_date)
        );
BEGIN
    -- Vérification des données
    IF check_in IS NULL OR check_out IS NULL OR nb_personnes IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Tous les paramètres doivent être renseignés.');
    END IF;

    IF check_in >= check_out THEN
        RAISE_APPLICATION_ERROR(-20002, 'La date de fin doit être postérieure à la date de début.');
    END IF;

    IF nb_personnes <= 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Le nombre de personnes doit être supérieur à 0.');
    END IF;

    -- Traitement
    OPEN cur;
    LOOP
        FETCH cur INTO chambre_dispo;
        EXIT WHEN cur%NOTFOUND;
        -- Afficher les informations sur la chambre
        DBMS_OUTPUT.PUT_LINE('Chambre : ' || chambre_dispo.numchambre || ', Capacité : ' || chambre_dispo.capacite || ', Type : ' || chambre_dispo.typechambre || ', Étage : ' || chambre_dispo.etage || ', Prix par jour : ' || chambre_dispo.prix_par_jour);
        cur_count := cur_count + 1;
    END LOOP;
    CLOSE cur;

    -- Vérifier si aucune chambre n'est disponible
    IF cur_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Aucune chambre disponible pour les critères spécifiés.');
    END IF;
END chambres_disponibles;
/

CREATE OR REPLACE TRIGGER check_room_availability
BEFORE INSERT OR UPDATE ON reservation
FOR EACH ROW
DECLARE
    v_overlap_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_overlap_count
    FROM reservation
    WHERE id_chambre_reserve = :new.id_chambre_reserve
    AND (
        (:new.check_in_date BETWEEN check_in_date AND check_out_date)
        OR (:new.check_out_date BETWEEN check_in_date AND check_out_date)
        OR (check_in_date BETWEEN :new.check_in_date AND :new.check_out_date)
        OR (check_out_date BETWEEN :new.check_in_date AND :new.check_out_date)
    )
    AND idreservation <> NVL(:old.idreservation, 0); -- Pour exclure la propre réservation lors de la mise à jour
    
    IF v_overlap_count > 0 THEN 
        RAISE_APPLICATION_ERROR(-20004, 'La chambre est déjà réservée pour cette période.');
    END IF;
END;
/
--Test Procédure :
INSERT INTO client (nom_client, prenom_client, adresse, num_tel, email)
VALUES ('Doe', 'John', '123 Rue République', '01234567', 'john.doe@example.com');

SELECT * FROM client;
-- Création de quelques chambres
INSERT INTO chambre (numchambre, capacite, typechambre, statut, etage, prix_par_jour)
VALUES (101, 2, 'Simple', 0, 1, 50);

INSERT INTO chambre (numchambre, capacite, typechambre, statut, etage, prix_par_jour)
VALUES (102, 4, 'Double', 1, 2, 80);

-- Création d'une réservation existante
INSERT INTO reservation (id_client_reservant, date_reservation, typereservation, check_in_date, check_out_date, souhait_particulier, id_chambre_reserve)
VALUES (2, SYSDATE, 1, TO_DATE('2024-04-15', 'YYYY-MM-DD'), TO_DATE('2024-04-20', 'YYYY-MM-DD'), 'Vue sur la mer',101);
--Test declencheur (Il va sortir un erreur dans ce cas ):
INSERT INTO reservation (id_client_reservant, date_reservation, typereservation, check_in_date, check_out_date, souhait_particulier, id_chambre_reserve)
VALUES (2, SYSDATE, 1, TO_DATE('2024-04-16', 'YYYY-MM-DD'), TO_DATE('2024-04-22', 'YYYY-MM-DD'), 'Vue sur la mer',101);
-- Test de la procédure chambres_disponibles
DECLARE
    -- Variables pour les paramètres de la procédure
    v_check_in_date DATE := TO_DATE('2024-04-14', 'YYYY-MM-DD');
    v_check_out_date DATE := TO_DATE('2024-04-25', 'YYYY-MM-DD');
    v_nb_personnes NUMBER := 2;
BEGIN
    -- Appel de la procédure avec les paramètres appropriés
    chambres_disponibles(v_check_in_date, v_check_out_date, v_nb_personnes);
END;
/


